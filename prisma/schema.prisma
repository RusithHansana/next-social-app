// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  clerkId       String        @unique
  username      String        @unique
  avatar        String?
  cover         String?
  name          String?
  surname       String?
  description   String?
  city          String?
  school        String?
  work          String?
  website       String?

  posts         Post[]
  likes         Like[]
  comments      Comment[]
  Stories       Story[]
  followers     Follower[]    @relation("UserFollowers")
  followings    Follower[]    @relation("UserFollowings")
  followRequestsSent FollowRequest[] @relation("FollowRequestsSent") 
  FollowRequestsRecieved FollowRequest[] @relation("FollowRequestsRecieved")
  blocked    Block[]       @relation("Blocked")
  blockedBy Block[]       @relation("BlockedBy")

  createAt      DateTime      @default(now())
}

model Post {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  img           String?
  likes         Like[]
  comments      Comment[]
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @db.ObjectId

  createAt      DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Comment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  likes         Like[]
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @db.ObjectId

  post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String        @db.ObjectId

  createAt      DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Like {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @db.ObjectId

  post          Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?        @db.ObjectId

  comments      Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String?        @db.ObjectId

  createAt      DateTime      @default(now())
}

model Follower {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  
  follower      User          @relation("UserFollowers",fields: [followerId], references: [id], onDelete: Cascade)
  followerId    String        @db.ObjectId
  
  following     User          @relation("UserFollowings",fields: [followingId], references: [id], onDelete: Cascade)
  followingId   String        @db.ObjectId
  
  createAt      DateTime      @default(now())
}

model FollowRequest {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  
  sender        User          @relation("FollowRequestsSent",fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String        @db.ObjectId
  
  reciever      User          @relation("FollowRequestsRecieved",fields: [recieverId], references: [id], onDelete: Cascade)
  recieverId    String        @db.ObjectId
  
  @@unique([senderId, recieverId])

  createAt      DateTime      @default(now())
}

model Block {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  
  blocker       User          @relation("Blocked",fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId     String        @db.ObjectId
  
  blocked       User          @relation("BlockedBy",fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId     String        @db.ObjectId
  
  @@unique([blockerId, blockedId])

  createAt      DateTime      @default(now())
}

model Story {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  img           String

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @unique @db.ObjectId

  createAt      DateTime      @default(now())
  expiresAt     DateTime      
}